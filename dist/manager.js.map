{"version":3,"sources":["../src/manager.tsx","../src/Panel.tsx"],"names":["React","useChannel","value"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAW;AAElB,SAAS,OAAO,cAAc;AAC9B,SAAS,qBAAqB;AAC9B,SAAS,QAAQ,OAAO,eAAe,cAAAC,mBAAkB;;;ACJzD,OAAO,SAAS,gBAAgB;AAEhC,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAc3B,IAAM,WAAW,CAAC,QAA4B,CAAC,MAAM;AACnD,QAAM,UAA+B,CAAC;AAEtC,SAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAKC,MAAK,MAAM;AAC9C,QAAI;AACF,cAAQ,GAAG,IAAI,KAAK,MAAMA,MAAY;AAAA,IACxC,QAAQ;AACN,cAAQ,GAAG,IAAIA;AAAA,IACjB;AAAA,EACF,CAAC;AAED,SAAO,KAAK,UAAU,SAAS,MAAM,CAAC;AACxC;AAEA,IAAM,eAA4C,CAAC,EAAE,eAAe,cAAc,MAChF,oCAAC,aAAU,SAAQ,mBACjB,oCAAC,SAAI,IAAG,iBAAgB,OAAM,oBAC5B,oCAAC,aAAK,SAAS,aAAa,CAAE,CAChC,GACA,oCAAC,SAAI,IAAG,iBAAgB,OAAM,oBAC5B,oCAAC,aAAK,SAAS,aAAa,CAAE,CAChC,CACF;AAGK,IAAM,QAA8B,CAAC,EAAE,OAAO,MAAM;AACzD,QAAM,CAAC,eAAe,gBAAgB,IAAI,SAA6B;AACvE,QAAM,CAAC,eAAe,gBAAgB,IAAI,SAA6B;AACvE,QAAM,OAAO,iBAAiB,cAAc,IAAI;AAEhD,aAAW;AAAA,IACT,CAAC,OAAO,kBAAkB,GAAG,CAAC,WAAW;AACvC,uBAAiB,MAAM;AACvB,uBAAiB,MAAM;AAAA,IACzB;AAAA,IACA,CAAC,OAAO,kBAAkB,GAAG,CAAC,WAAW;AACvC,uBAAiB,MAAM;AAAA,IACzB;AAAA,EACF,CAAC;AAED,MAAI,CAAC,OAAQ,QAAO;AAEpB,SACE,0DACG,QAAQ,oCAAC,UAAK,OAAO,EAAE,SAAS,MAAM,KAAI,IAAK,GAC/C,CAAC,QAAQ,oCAAC,gBAAa,eAA8B,eAA8B,CACtF;AAEJ;;;ADzDA,SAAS,QAAQ;AACf,QAAM,CAAC,EAAE,MAAM,GAAG,QAAQ,IAAI,cAAc,UAAU,EAAE,OAAO,EAAE,CAAC;AAElE,EAAAD,YAAW;AAAA,IACT,CAAC,OAAO,kBAAkB,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO,EAAE,QAAQ,EAAE,EAAE;AAAA,IACjF,CAAC,OAAO,kBAAkB,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO,EAAE,EAAE;AAAA,IACvE,CAAC,aAAa,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO,EAAE,EAAE;AAAA,EAC7D,CAAC;AAED,QAAM,SAAS,UAAU,IAAI,KAAK,gBAAAD,OAAA,cAAC,SAAM,QAAO,aAAW,KAAM;AAEjE,SACE,gBAAAA,OAAA,cAAC,aACC,gBAAAA,OAAA,cAAC,UAAO,KAAK,KACX,gBAAAA,OAAA,cAAC,UAAK,OAAO,EAAE,SAAS,gBAAgB,eAAe,SAAS,KAAG,cAAY,GAC9E,MACH,CACF;AAEJ;AAEA,OAAO,SAAS,UAAU,MAAM;AAC9B,SAAO,IAAI,UAAU;AAAA,IACnB,MAAM,MAAM;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ,CAAC,EAAE,OAAO,MAAM,gBAAAA,OAAA,cAAC,SAAM,QAAgB;AAAA,EACjD,CAAC;AACH,CAAC","sourcesContent":["import React from 'react';\n\nimport { Badge, Spaced } from '@storybook/components';\nimport { STORY_CHANGED } from '@storybook/core-events';\nimport { addons, types, useAddonState, useChannel } from '@storybook/manager-api';\nimport { Panel } from './Panel';\nimport { ADDON_ID, EVENTS, PANEL_ID } from './constants';\n\nfunction Title() {\n  const [{ count }, setCount] = useAddonState(ADDON_ID, { count: 0 });\n\n  useChannel({\n    [EVENTS.SET_CURRENT_VALUES]: () => setCount((c) => ({ ...c, count: c.count + 1 })),\n    [EVENTS.SET_INITIAL_VALUES]: () => setCount((c) => ({ ...c, count: 0 })),\n    [STORY_CHANGED]: () => setCount((c) => ({ ...c, count: 0 })),\n  });\n\n  const suffix = count === 0 ? '' : <Badge status=\"neutral\">{count}</Badge>;\n\n  return (\n    <div>\n      <Spaced col={1}>\n        <span style={{ display: 'inline-block', verticalAlign: 'middle' }}>localStorage</span>\n        {suffix}\n      </Spaced>\n    </div>\n  );\n}\n\naddons.register(ADDON_ID, () => {\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: Title,\n    render: ({ active }) => <Panel active={active} />,\n  });\n});\n","import React, { useState } from 'react';\n\nimport { TabsState } from '@storybook/components';\nimport { useChannel } from '@storybook/manager-api';\n\nimport { EVENTS, NOTE } from './constants';\nimport { LocalStorageRecord } from './types';\n\ntype PanelProps = {\n  active?: boolean;\n};\n\ntype PanelContentProps = {\n  initialValues?: LocalStorageRecord;\n  currentValues?: LocalStorageRecord;\n};\n\nconst toString = (value: LocalStorageRecord = {}) => {\n  const results: Record<string, any> = {};\n\n  Object.entries(value).forEach(([key, value]) => {\n    try {\n      results[key] = JSON.parse(value as any);\n    } catch {\n      results[key] = value;\n    }\n  });\n\n  return JSON.stringify(results, null, 2);\n};\n\nconst PanelContent: React.FC<PanelContentProps> = ({ initialValues, currentValues }) => (\n  <TabsState initial=\"initialValues\">\n    <div id=\"initialValues\" title=\"Initial Values\">\n      <pre>{toString(initialValues)}</pre>\n    </div>\n    <div id=\"currentValues\" title=\"Current Values\">\n      <pre>{toString(currentValues)}</pre>\n    </div>\n  </TabsState>\n);\n\nexport const Panel: React.FC<PanelProps> = ({ active }) => {\n  const [currentValues, setCurrentValues] = useState<LocalStorageRecord>();\n  const [initialValues, setInitialValues] = useState<LocalStorageRecord>();\n  const note = initialValues && initialValues[NOTE];\n\n  useChannel({\n    [EVENTS.SET_INITIAL_VALUES]: (values) => {\n      setInitialValues(values);\n      setCurrentValues(values);\n    },\n    [EVENTS.SET_CURRENT_VALUES]: (values) => {\n      setCurrentValues(values);\n    },\n  });\n\n  if (!active) return null;\n\n  return (\n    <>\n      {note && <code style={{ padding: '1em' }}>{note}</code>}\n      {!note && <PanelContent currentValues={currentValues} initialValues={initialValues} />}\n    </>\n  );\n};\n"]}