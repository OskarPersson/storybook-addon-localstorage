{"version":3,"sources":["../src/withLocalStorage.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,SAAS,WAAW,gBAAgB;AAE3C,SAAS,QAAQ,qBAAqB;AAUtC,IAAM,6BAA6B,CAAC,EAAE,YAAY,SAAS,MAAa;AACtE,QAAM,UAAU,OAAO,WAAW;AAClC,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAS,KAAK;AAExC,QAAM,WAAW,CAAC,SAAiB;AACjC,YAAQ,KAAK,OAAO,oBAAoB,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC;AACxD,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,WAAY,QAAO,SAAS,qCAAqC;AAEtE,YAAU,MAAM;AACd,WAAO,aAAa,MAAM;AAE1B,WAAO,QAAQ,UAAU,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACnD,aAAO,aAAa,QAAQ,KAAK,OAAO,KAAK,CAAC;AAAA,IAChD,CAAC;AAED,QAAI,uBAAuB;AAC3B,UAAM,OAAO,OAAO,KAAK,UAAU;AAEnC,UAAM,aAAa,YAAY,MAAM;AACnC,YAAM,eAAwC,CAAC;AAE/C,iBAAW,OAAO,MAAM;AACtB,qBAAa,GAAG,IAAI,OAAO,aAAa,QAAQ,GAAG;AAAA,MACrD;AAEA,YAAM,qBAAqB,KAAK,UAAU,YAAY;AAEtD,UAAI,yBAAyB,oBAAoB;AAC/C,+BAAuB;AACvB,gBAAQ,KAAK,OAAO,oBAAoB,YAAY;AAAA,MACtD;AAAA,IACF,GAAG,GAAG;AAEN,aAAS,IAAI;AAEb,WAAO,MAAM;AACX,oBAAc,UAAU;AAExB,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACvC,eAAO,aAAa,WAAW,GAAG;AAAA,MACpC,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,UAAU,CAAC;AAEf,UAAQ,KAAK,OAAO,oBAAoB,EAAE,GAAG,WAAW,CAAC;AAEzD,SAAO,QAAQ,WAAW;AAC5B;AAEO,IAAM,mBAAmB,cAAc;AAAA,EAC5C,MAAM;AAAA,EACN,eAAe;AAAA,EACf,SAAS,CAAC,UAAU,SAAS,EAAE,WAAW,MACxC,oCAAC,8BAA2B,cAAyB,SAAS,OAAO,CAAS;AAElF,CAAC","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { addons, makeDecorator } from '@storybook/preview-api';\n\nimport { EVENTS, NOTE } from './constants';\nimport type { LocalStorageRecord } from './types';\n\ntype Props = {\n  children: React.ReactElement;\n  parameters: LocalStorageRecord;\n};\n\nconst StorybookAddonLocalStorage = ({ parameters, children }: Props) => {\n  const channel = addons.getChannel();\n  const [ready, setReady] = useState(false);\n\n  const userNote = (note: string) => {\n    channel.emit(EVENTS.SET_INITIAL_VALUES, { [NOTE]: note });\n    return children;\n  };\n\n  if (!parameters) return userNote('parameters.localStorage not defined');\n\n  useEffect(() => {\n    window.localStorage.clear();\n\n    Object.entries(parameters).forEach(([key, value]) => {\n      window.localStorage.setItem(key, String(value));\n    });\n\n    let previousValuesAsJSON = '';\n    const keys = Object.keys(parameters);\n\n    const intervalId = setInterval(() => {\n      const actualValues: Record<string, unknown> = {};\n\n      for (const key of keys) {\n        actualValues[key] = window.localStorage.getItem(key);\n      }\n\n      const actualValuesAsJSON = JSON.stringify(actualValues);\n\n      if (previousValuesAsJSON !== actualValuesAsJSON) {\n        previousValuesAsJSON = actualValuesAsJSON;\n        channel.emit(EVENTS.SET_CURRENT_VALUES, actualValues);\n      }\n    }, 100);\n\n    setReady(true);\n\n    return () => {\n      clearInterval(intervalId);\n\n      Object.keys(parameters).forEach((key) => {\n        window.localStorage.removeItem(key);\n      });\n    };\n  }, [parameters]);\n\n  channel.emit(EVENTS.SET_INITIAL_VALUES, { ...parameters });\n\n  return ready ? children : null;\n};\n\nexport const withLocalStorage = makeDecorator({\n  name: 'withLocalStorage',\n  parameterName: 'localStorage',\n  wrapper: (getStory, context, { parameters }) => (\n    <StorybookAddonLocalStorage parameters={parameters}>{getStory(context) as any}</StorybookAddonLocalStorage>\n  ),\n});\n"]}